
//------------------------------------------------------------------------------
//     This code was generated by a SAP. NET Connector Proxy Generator Version 1.0
//     Created at 27.01.2004
//     Created from Windows 2000
//
//     This file is created as an example and stating point
//     for the server implementation. It cam be freely modified.
//     The file is NOT overwitten on regeneration.
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Diagnostics;
using System.Text;
using System.Threading;
using SAP.Connector;

namespace BarkodRFC
{
  public class BarkodRFCImpl : BarkodRFC
  {
    public BarkodRFCImpl(string[] args, SAPServerHost host) : base(args, host) {}

    // Implementation of Server Methods
    
    // Implementation of remote function module Z_DATAMAX_PRINT
    protected override void Z_DATAMAX_PRINT (string IDENT,string IP,string PORT,string PRINT_COMMANDS)
    {
		// TODO: add your server code here
		FileInfo		fi;
		FileStream		fs;
		DirectoryInfo	di;
		byte[]			byteArray;
		UTF8Encoding ascii = new UTF8Encoding();

		// Convert string to byteArray
		byteArray	= new byte[10000];
		byteArray	= ascii.GetBytes(PRINT_COMMANDS);

		// Check if folder exists and create if it doesnt
		di			= new DirectoryInfo("brk\\" + IP);
		if (!di.Exists) di.Create();

		// Create filename
		string		fileName;
		fileName	=	di.FullName + "\\";
		fileName	+=	System.DateTime.Now.Year.ToString();
		if (System.DateTime.Now.Month.ToString().Length < 2)
		{
			fileName += "0";
		}
		fileName	+=	System.DateTime.Now.Month.ToString();
		if (System.DateTime.Now.Day.ToString().Length < 2)
		{
			fileName += "0";
		}
		fileName	+=	System.DateTime.Now.Day.ToString();
		if (System.DateTime.Now.Hour.ToString().Length < 2)
		{
			fileName += "0";
		}
		fileName	+=	System.DateTime.Now.Hour.ToString();
		if (System.DateTime.Now.Minute.ToString().Length < 2)
		{
			fileName += "0";
		}
		fileName	+=	System.DateTime.Now.Minute.ToString();
		if (System.DateTime.Now.Second.ToString().Length < 2)
		{
			fileName += "0";
		}
		fileName	+=	System.DateTime.Now.Second.ToString();
		fileName	+=	System.DateTime.Now.Millisecond.ToString();
		fileName	+=	"_" + IP;
		fileName	+=	"_" + PORT;
		fileName	+=	"_" + IDENT + ".txt";

		// Open file and write stuff
		fi			= new FileInfo(fileName);
		fs			= fi.OpenWrite();
		fs.Write(byteArray, 0, byteArray.Length - 1);
		fs.Flush();
		fs.Close();
    } 
 

    // Example Main function
    static void Main(string[] args)
    {
      const int numberOfServers = 30;
      SAPServerHost host = new SAPServerHost();
      BarkodRFCImpl server = null;
      for(int i = 0; i < numberOfServers; i++)
      {
        Console.WriteLine("Create RFC Server BarkodRFCImpl instance {0}" ,i);
        server = new BarkodRFCImpl(args,host);
      }
      try
      {
        Console.WriteLine("Start RFC Server BarkodRFCImpl instances");
        host.Start();
		Console.WriteLine ("\nSAP Servers created with connection info\n" 
			+ "program ID: " + server.ProgramID + "\nGWHost: " + server.SAPGatewayHost 
			+ "\nGWService: " + server.SAPGatewayService + "\n");
      }
      catch(Exception e)
      {
        Console.WriteLine(e.Message);
        Console.WriteLine("Hit RETURN to exit!");
        Console.ReadLine();
        return;
		
      }
      Console.WriteLine("Type HELP for the list of commands.");
      string command = "";
      do
      {
        command = Console.ReadLine();
        switch(command.ToLower())
        {
			case "help" :
				Console.WriteLine("Commands: Help, Stop, Start, Pause, Continue, Clear, Exit");
				break;
			case "help stop" :
				Console.WriteLine("STOP: Stops all BarkodRFC instances.");
				break;
			case "help start" :
				Console.WriteLine("START: Starts all BarkodRFC instances.");
				break;
			case "help pause" :
				Console.WriteLine("PAUSE: Pauses all BarkodRFC instances.");
				break;
			case "help continue" :
				Console.WriteLine("CONTINUE: Resumes all BarkodRFC instances.");
				break;
			case "help clear" :
				Console.WriteLine("CLEAR: Stops and removes all BarkodRFC instances.");
				break;
			case "help exit" :
				Console.WriteLine("EXIT: Stops all BarkodRFC instances and exits program.");
				break;
			case "stop" :
				host.Stop();
				Console.WriteLine("All BarkodRFCImpl instances stopped.");
				break;
			case "start":
				host.Start();
				Console.WriteLine("All BarkodRFCImpl instances started.");
				break;
			case "pause":
				host.Pause();
				Console.WriteLine("All BarkodRFCImpl instances paused.");
				break;
			case "continue":
				host.Continue();
				Console.WriteLine("All BarkodRFCImpl instances resumed.");
				break;
			case "clear":
				host.RemoveAllSAPServers();
				Console.WriteLine("All BarkodRFCImpl instances stopped and removed.");
				break;
			case "exit":
				host.Stop();
				Console.WriteLine("All BarkodRFCImpl instances stopped and program exits.");
				break;
        }
      }while(command.ToLower() != "exit");
    } 
  } 
} 
